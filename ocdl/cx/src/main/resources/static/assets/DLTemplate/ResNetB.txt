def ResnetB(dense = False):
    input = Input(shape=[100, 100, 1])
    layer = Conv2D(filters=32,
                   kernel_size=[3, 3],
                   kernel_initializer='random_uniform',
                   # kernel_regularizer=regularizers.l2(0.01),
                   strides=[1, 1],
                   padding='same')(input)
    layer = resnet_block_B(layer, 32, [3, 3], 0, 'relu')
    # 50*50
    layer = resnet_block_B(layer, 64, [3, 3], 0, 'relu', cross_block=True, shrink=True)
    layer = resnet_block_B(layer, 64, [3, 3], 0, 'relu')
    # 25*25
    layer = resnet_block_B(layer, 128, [3, 3], 0, 'relu', cross_block=True, shrink=True)
    layer = resnet_block_B(layer, 128, [3, 3], 0, 'relu')
    # 13*13
    layer = resnet_block_B(layer, 256, [3, 3], 0, 'relu', cross_block=True, shrink=True)
    layer = resnet_block_B(layer, 256, [3, 3], 0, 'relu')
    # 7*7
    layer = resnet_block_B(layer, 512, [3, 3], 0, 'relu', cross_block=True, shrink=True)
    layer = resnet_block_B(layer, 512, [3, 3], 0, 'relu', is_last=True)
    if dense:
        output = Dense(units=5,activation='softmax')(layer)
    else:
        output = global_average_pooling(layer, 5)
    model = Model(inputs=[input], outputs=[output])
    model.summary()
    return model